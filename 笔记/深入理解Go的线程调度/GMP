Go语言基于GMP模型实现用户态线程：

要解决的问题是：是否可以找到某种方式使得kernal thread可以更好的调用user thread减少系统进程切换的开销（如何给kernal thread分配user thread及其机制？）
用户态：CPU中非特权状态，权限受限
内核态：CPU中特权状态，拥有一切权限

G：Goroutine,goroutine是一个个可运行的协程，每个goroutine都有自己的栈空间，定时器，初始化的栈空间在2k左右，空间会随着需求增长。（存储结构）
M：Machine：内核线程，记录内核线程栈信息，当goroutine调度到线程时，使用该goroutine记录自己的栈信息。（执行）
P：Process：代表调度器（处理器），负责调度goroutine，维护一个本地goroutine队列，M从P上获得goroutine并执行，同时还负责部分内存的管理。（调度）

P：Process是一个状态机，有状态如下：
    _Pidle:处理器没有运行用户代码或者调度器，被空闲队列或者改变其状态的结构持有，运行队列为空（初始化状态，没有任何G需要运行）
    _Prunning:被线程M持有，并且正在执行用户态代码或者调度器（P和M产生绑定关系）
    _Psyscal:没有执行用户代码，当前线程陷入系统调用（system call 系统调用）
    _Pgcstop:被线程M持有，当前处理器由于垃圾回收被停止（gc垃圾回收）
    _Pdead:当前处理器已不被使用

G：Goroutine是一个状态机：
    _Gidle: G刚分配并且还没被初始化，值为0，为创建goroutine后的默认值
    _Grunnable: 没有执行代码，没有栈的所有权，储存在运行队列中，可能在某个P的本地队列或全局队列中 （初始化完成还未调度，正在执行队列里面）
    _Grunning: 正在执行代码的goroutine，拥有栈的所有权 （跟M已经产生了绑定关系）
    _Gsyscall: 正在执行系统调用，拥有栈的所有权，与P脱离，但与某个M绑定，会在调用结束后被分配到运行队列
    _Gwaiting: 被阻塞的goroutine，阻塞在某个channel的发送或者接受队列
    _Gdead: 当前goroutine未被使用，没有执行代码，可能有分配的栈，分布在空闲列表gFree，可能是一个刚刚初始化的goroutine，也可能是执行了goexit退出的goroutine
    _Gcopystac:栈正在被拷贝，没有执行代码，不在运行队列上，
    _Gscan:GC正在扫描空间，没有执行代码，可以与其他状态同时存在

G所处的位置：
    每一个进程都有的全局的队列G
    每个P拥有自己的本地执行队列
    有不在运行队列中的G
        channel中阻塞的G
        在M上绑定的G
        为了复用结束后进入P的gFree列表中的G


Goroutine的创建过程：（还没进入P）
    1. 获取或者创建新的Goroutine结构体
        1.1 从P的gFree列表中查找空闲的Goroutine
        1.2 如果不存在空闲的Goroutine，会通过runtime.malg创建一个栈大小足够的新结构体
    2. 将函数传入的参数转移到Goroutine的栈上
    3. 更新Goroutine调度相关的属性，更新状态为_Grunnable
    4. 返回的Goroutine会存储到全局变量allgs中

将Goroutine放到运行队列上：
    1. Goroutine设置到处理器的runnext作为下一个处理器执行的任务 （local runing queue里面）
    2. 当处理器的本地运行队列已经没有剩余空间时（256），就会把本地队列中的一部分Goroutine和待加入个Goroutine通过runtime.runqputslow添加到调度器持有的全局运行队列上。

调度器行为：
    1. 为了保证公平，当全局队列存在goroutine时，运行队列会通过schedtick有一定的几率（1/61)从全局运行队列上寻找Goroutine
    2. 从本地运行队列中寻找goroutine
    3. 如果前两种方法都没有找到goroutine，会通过runtime.findrunnable进行阻塞式地查找Goroutine
        3.1 从本地运行队列、全局运行队列中查找
        3.2 从网络轮询器中查找是否有Goroutine等待运行
        3.3 通过runtime.runqsteal尝试从其他随机的处理器中窃取一半待执行的Goroutine
